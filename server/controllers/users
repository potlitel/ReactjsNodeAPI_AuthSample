// import { randomBytes } from "crypto";
const randomBytes = require("crypto");
const Entity = require("../models/Entities/user");

// GET ALL
/**
 * Description
 * @param {any} req
 * @param {any} res
 * @param {any} next
 * @returns {any}
 */
exports.get_all = async (req, res, next) => {
  try {
    const entities = await Entity.find();
    return res.status(200).send(entities);
  } catch (err) {
    next(err);
  }
};

// POST
/**
 * Description
 * @param {any} req
 * @param {any} res
 * @param {any} next
 * @returns {any}
 */
exports.create = async (req, res, next) => {
  try {
    const entity = new Entity(req.body);
    entity
      .save()
      .then((result) => res.status(200).send(result))
      .catch((err) => next(err));
  } catch (err) {
    next(err);
  }
};

// GET SINGLE
/**
 * Description
 * @param {any} req
 * @param {any} res
 * @param {any} next
 * @returns {any}
 */
exports.get = async (req, res, next) => {
  try {
    const { id } = req.params;
    const entity = await Entity.findById(id);
    if (!entity) return next();
    return res.status(200).send(entity);
  } catch (err) {
    next(err);
  }
};

//UPDATE
/**
 * Description
 * @param {any} req
 * @param {any} res
 * @param {any} next
 * @returns {any}
 */
exports.update = async (req, res, next) => {
  try {
    const { id } = req.params;
    Entity.findOneAndUpdate(
      { _id: id },
      req.body,
      { upsert: true },
      function (err, doc) {
        if (err) next(err);
        return res.status(200).send(doc);
      }
    );
  } catch (err) {
    next(err);
  }
};

// DELETE
/**
 * Description
 * @param {any} req
 * @param {any} res
 * @param {any} next
 * @returns {any}
 */
exports.delete = async (req, res, next) => {
  try {
    const { id } = req.params;
    Entity.deleteOne({ _id: id })
      .then((result) => {
        return res.status(200).send(result);
      })
      .catch((err) => {
        next(err);
      });
  } catch (err) {
    next(err);
  }
};

exports.register = async (req, res, next) => {
  const salt = randomBytes(32);
  // try {
  //   // const { error } = validate(req.body);
  //   // if (error)
  //   //   return res.status(400).send({ message: error.details[0].message });

  //   const user = await Entity.findOne({ email: req.body.email });
  //   if (user)
  //     return res
  //       .status(409)
  //       .send({ message: "User with given email already Exist!" });

  //   const salt = await bcrypt.genSalt(Number(process.env.SALT));
  //   const hashPassword = await bcrypt.hash(req.body.password, salt);

  //   await new Entity({ ...req.body, password: hashPassword }).save();
  //   res.status(201).send({ message: "User created successfully" });
  // } catch (error) {
  //   res.status(500).send({ message: "Internal Server Error" });
  // }
};
